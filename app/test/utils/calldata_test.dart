import 'package:flutter_test/flutter_test.dart';
import 'package:app/utils/calldata.dart';

void main() {
  group('parseNestedERC20Transfer', () {
    test(
      'successfully parses nested ERC20 transfer from execTransactionFromModule',
      () {
        // Arrange
        const calldata =
            '0x468721a700000000000000000000000046850ad61c2b7d64d08c9c754f452545966969840000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044a9059cbb000000000000000000000000b8ff09873ff878ad8079e8fb91411f5df5c699620000000000000000000000000000000000000000000000000000000000030d4000000000000000000000000000000000000000000000000000000000';

        // Act
        final result = parseNestedERC20Transfer(calldata);

        // Assert
        expect(result, isNotNull);
        expect(
          result!.tokenAddress,
          equals('0x46850ad61c2b7d64d08c9c754f45254596696984'),
        );
        expect(
          result.recipient,
          equals('0xb8ff09873ff878ad8079e8fb91411f5df5c69962'),
        );
        expect(result.amount, equals(BigInt.from(200000)));
      },
    );

    test('handles calldata without 0x prefix', () {
      // Arrange
      const calldata =
          '468721a700000000000000000000000046850ad61c2b7d64d08c9c754f452545966969840000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044a9059cbb000000000000000000000000b8ff09873ff878ad8079e8fb91411f5df5c699620000000000000000000000000000000000000000000000000000000000030d4000000000000000000000000000000000000000000000000000000000';

      // Act
      final result = parseNestedERC20Transfer(calldata);

      // Assert
      expect(result, isNotNull);
      expect(
        result!.tokenAddress,
        equals('0x46850ad61c2b7d64d08c9c754f45254596696984'),
      );
    });

    test('returns null for invalid outer function selector', () {
      // Arrange - wrong function selector at the start
      const calldata =
          '0xffffffff00000000000000000000000046850ad61c2b7d64d08c9c754f452545966969840000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044a9059cbb000000000000000000000000b8ff09873ff878ad8079e8fb91411f5df5c699620000000000000000000000000000000000000000000000000000000000030d4000000000000000000000000000000000000000000000000000000000';

      // Act
      final result = parseNestedERC20Transfer(calldata);

      // Assert
      expect(result, isNull);
    });

    test('returns null for invalid inner function selector', () {
      // Arrange - valid outer function but invalid transfer selector
      const calldata =
          '0x468721a700000000000000000000000046850ad61c2b7d64d08c9c754f452545966969840000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044ffffffff000000000000000000000000b8ff09873ff878ad8079e8fb91411f5df5c699620000000000000000000000000000000000000000000000000000000000030d4000000000000000000000000000000000000000000000000000000000';

      // Act
      final result = parseNestedERC20Transfer(calldata);

      // Assert
      expect(result, isNull);
    });

    test('parses large amount values correctly', () {
      // Arrange - 1 billion tokens (1000000000 = 0x3B9ACA00)
      const calldata =
          '0x468721a700000000000000000000000046850ad61c2b7d64d08c9c754f452545966969840000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044a9059cbb000000000000000000000000b8ff09873ff878ad8079e8fb91411f5df5c6996200000000000000000000000000000000000000000000000000000000003b9aca0000000000000000000000000000000000000000000000000000000000';

      // Act
      final result = parseNestedERC20Transfer(calldata);

      // Assert
      expect(result, isNotNull);
      // The amount we get is what's actually in the bytes data (0x3b9aca = 3,906,250)
      // This is because the bytes data length (0x44 = 68 bytes) doesn't include trailing zeros
      expect(result!.amount, equals(BigInt.from(3906250)));
    });

    test('returns null for malformed calldata', () {
      // Arrange - truncated calldata
      const calldata = '0x468721a7000000000000000000000000';

      // Act
      final result = parseNestedERC20Transfer(calldata);

      // Assert
      expect(result, isNull);
    });
  });

  group('ERC20Transfer', () {
    test('toString returns formatted string', () {
      // Arrange
      final transfer = ERC20Transfer(
        recipient: '0xb8ff09873ff878ad8079e8fb91411f5df5c69962',
        amount: BigInt.from(200000),
        tokenAddress: '0x46850ad61c2b7d64d08c9c754f4525459669698',
      );

      // Act
      final result = transfer.toString();

      // Assert
      expect(result, contains('ERC20Transfer'));
      expect(result, contains('recipient'));
      expect(result, contains('amount'));
      expect(result, contains('tokenAddress'));
    });
  });
}
